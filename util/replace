#!/usr/bin/env python3

"""
Caveat:
An empty file (such as one created by POSIX touch on a nonexistent target) is
seen as application/octet-stream and will cause replace to throw an error
because it's not a plain-text file. If you're going to have an empty file, put
at least a single space or newline character to prevent this. Alternatively,
you could put a comment (like // or /* */ in C++) indicating the purpose of the
file.
"""

from magic import Magic
import sys # argv
from os import path

# TODO: generalize error message rather than printing after usage()
def usage():
    print("""
USAGE: {} <source> <target> <REP> [-o <destination>]
<source> - Plaintext file to be inserted
<target> - Plaintext file to target for insertion
<REP> - string in <target> to be replaced
-o [destination] Optional destination to write result to. If not supplied, result is printed to STDOUT

example:
replace foo.txt bar.txt BAZ -o foobar.txt
would insert foo.txt into bar.txt where the characters [$BAZ$] are found
""".format(path.basename(sys.argv[0])))

def main():
    if len(sys.argv) != 4 and len(sys.argv) != 6:
        usage()
        print("Error: Incorrect amount of arguments supplied")
        exit(1)

    if not path.isfile(sys.argv[1]):
        usage()
        print("Error: {} is not a file".format(sys.argv[1]))
        exit(2)

    if not path.isfile(sys.argv[2]):
        usage()
        print("Error: {} is not a file".format(sys.argv[2]))
        exit(2)

    # TODO: find a more pythonic method of checking whether file is text
    if not Magic(mime=True).from_file(path.abspath(sys.argv[1])).startswith("text/"):
        usage()
        print("Error: {} is not a plain text file.".format(sys.argv[1]))
        exit(3)

    if not Magic(mime=True).from_file(path.abspath(sys.argv[2])).startswith("text/"):
        usage()
        print("Error: {} is not a plain text file.".format(sys.argv[2]))
        exit(3)

    if len(sys.argv) == 6:
        if sys.argv[4] != "-o":
            usage()
            print("Error: {} is not a valid argument.".format(sys.argv[4]))
            exit(4)

        if not path.exists(path.dirname(path.abspath(sys.argv[5]))):
            usage()
            print("Error: {} is not a valid directory.".format(path.dirname(sys.argv[5])))
            exit(5)

        if path.isdir(sys.argv[5]):
            usage()
            print("Error: {} is a path.".format(sys.argv[5]))
            exit(6)

    if not sys.argv[3].isalnum():
        usage()
        print("Error: {} contains non-alphanumeric values".format(sys.argv[3]))
        exit(7)

    targetf = open(sys.argv[2],'r')
    target = targetf.read()
    targetf.close()

    if "[${}$]".format(sys.argv[3]) not in target:
        usage()
        print("Error: {} does not contain {}".format(sys.argv[2], "[${}$]".format(sys.argv[3])))
        exit(8)

    sourcef = open(sys.argv[1],'r')
    source = sourcef.read()
    sourcef.close()

    if len(sys.argv) == 4:
        print(target.replace("[${}$]".format(sys.argv[3]), source))
    else:
        destinationf = open(sys.argv[5], 'w')
        destinationf.write(target.replace("[${}$]".format(sys.argv[3]), source))

if __name__ == "__main__":
    main()
